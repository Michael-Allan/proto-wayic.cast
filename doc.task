wayic.cast/doc.task - Documentation in rough

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Architectural import`
    < http://reluk.ca/project/wayic/architecture/doc.task § wayic architecture = waycast form

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Design constraints`
    [ ⤓ minimal
        - necessary form of the waycast
        * /way.xht
            - the waycast root document
                ( ./waycast_root_document
            - its purpose is to declare in wayscript form both the way and the commitment to act on it
            * way
                - a minimal way declaration comprises a waycast root in the form
                  of an intercast joint
                    ( ./waycast_root
                    ( http://reluk.ca/project/wayic/intercast/ § Intercast joint
                    = clarify the form
                        - a joint has *two* elements, not one
                    = verify that it meets the formal contraints
                        - e.g. of the waycast root, and of joint elements
                    = verify that the subjoint elements would be on way
                        - covered that is by the definition of "on way"
                - this is also a typical way declaration, though not infrequently
                  it would be accompanied by the declaration of one or more variant waybits, too
                    ( http://reluk.ca/project/wayic/intercast/ § *patch* element
            * commitment
                - the minimum here is a waybit with an *id* attribute of 'commitment'
                    - thereby potentially subjoining
                        ( http://reluk.ca/project/wayic/script/doc.task § Subjoining waybit
                - no corresponding jointer (no actual commitment declaration) is required
                    ( http://reluk.ca/project/wayic/script/doc.task § commitment declaration
                    - though a typical waycast would have at least one
    [ ⤒ maximal
        - allowed form of the waycast
            * directories
                ( aka 'folders'
                - gross, ad hoc structuring of way definitions
                    - the full definition is so structured
                        - not merely its declaration
                    ( in other words
                        - looking at the extreme case
                        - a way declaration comprising a single intercast joint (§ minimal § way)
                          nevertheless resolves to a way definition that is structured by all
                          remote directories which the link entails
                - purpose: orientation
                    - the name and path of a directory reveals in part the context of its wayic content
            * README files
                - purpose: clarity
                    - enabling the waycast to describe itself for sake of clarifying the general way form
            * way declaration documents
                ( ./way_declaration_document
            * uniquely personal files
                ( cf. wayic.copy § uniquely personal lines of text
                - private or personally customized content
                - though the bulk of content is expected to be literally shareable in common with others
                    - there is no use in trying to restrict what is not
            * anything else that reason demands
                ( cf. 'catch all'
                - I would document the reason
                    - why it isn't better (or just as well) stored outside the waycast
        - disallowed form
          / * wayscribe-defined file names beginning with an underscore '_'
          /     ( including directory names
          /     - reserved for future definition
          //    ! useless
          /         - already the individual waycaster is able to avoid local file name conflicts
          /           or to resolve any that might be introduced by a change of waycast design
            * wayscript located in files other than way declaration documents
                - else if relying on another file type to formalize one's way:
                    - the waycast would lose coherence
                    - personally
                        - it would get out of hand
                        - it would feel less WYSIWYG when editing the files
                            - since a unified view would require a more complicated assembly
                              that is difficult to foresee in imagination
                                - while editing
                    - technically
                        - since a unified view/presentation would require a more complicated assembly
                            - it would be more difficult to program the presenter (UI)
            * anything that is better (or just as well) stored outside the waycast
                ( cf. 'catch all'

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Personal configuration`
    [ way declaration document
        - the web view of each way declaration document is configured by these files
          located in the base directory of the waycast
            * way.css
                - personal style sheet
                ( example: http://reluk.ca/project/waycast/way.css
            * way.js
                - personal configuration program
                ( example: http://reluk.ca/project/waycast/way.js
        - they configure the view shown to the waycaster
            - and the default view shown to others
        * usage instructions for a way declaration document
            - working example
                ( source: https://github.com/Michael-Allan/waycast/blob/master/autonomist/way.xht
                ( live: http://reluk.ca/project/waycast/autonomist/way.xht
            = link to way.css from the *head* element of the document
                - example:

                      <head>
                          · · ·
                          <link rel='stylesheet' href='../way.css'/> <!-- HERE CUSTOM -->
                          · · ·
                          </head>

            = load way.js from the bottom of the *body* element
                - example:

                      <body>
                          · · ·
                          <script src='../way.js'/> <!-- HERE CUSTOM -->
                          </body>


                                     Copyright © 2017-2018 Michael Allan and contributors.  Licence MIT.
