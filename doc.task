wayic.cast/doc.task - Documentation in rough

    ____________________________________________________________________________________________________
    architectural import`
    < http://reluk.ca/project/wayic/architecture/doc.task § wayic architecture = waycast form

    ____________________________________________________________________________________________________
    design constraints`
    [ ⤓ minimal
        - necessary form
        * /way.xht
            - the root document
                ( root#root_document
            - its purpose is to declare in wayscript form both the way and the commitment to act on it
            * way
                - a minimal way declaration comprises a root element in the form of an intercast waylink
                    ( root#root_element
                    ( http://reluk.ca/project/wayic/intercast/ § intercast waylink
                - this is also a typical way declaration, though not infrequently
                  it would be accompanied by the declaration of one or more variant waybits, too
                    ( http://reluk.ca/project/wayic/intercast/ § *patch* element
            * commitment
                - the minimum here is a waylink target node with an *id* attribute of 'commitment'
                    ( http://reluk.ca/project/wayic/script/doc.task § waylink § target nodes
                - no actual commitment declaration (no corresponding source node) is required
                    ( http://reluk.ca/project/wayic/script/doc.task § commitment declaration
                    - though typically there'd be one or more of these
    [ ⤒ maximal
        - allowed form
            * directories
                ( aka 'folders'
                - gross, ad hoc structuring of way definitions
                    - the full definition is so structured
                        - not merely its declaration
                    ( in other words
                        - looking at the extreme case
                        - a way declaration comprising a single intercast waylink (§ minimal § way)
                          nevertheless resolves to a way definition that is structured by all
                          remote directories which the link entails
                - purpose: orientation
                    - the name and path of a directory reveals in part the context of its wayic content
            * README files
                - purpose: clarity
                    - enabling the waycast to describe itself for sake of clarifying the general way form
            * wayscript files
                - files that are dedicated to wayscript, e.g. way.xht
            * uniquely personal files
                - private or personally customized content
                - though the bulk of content is expected to be literally shareable in common with others
                    - there's no use in trying to restrict what isn't
            * anything else that reason demands
                ( cf. 'catch all'
                - I would document the reason
                    - why it isn't better (or just as well) stored outside the waycast
        - disallowed form
          / * wayscribe-defined file names beginning with an underscore '_'
          /     ( including directory names
          /     - reserved for future definition
          //    ! useless
          /         - already the individual waycaster is able to avoid local file name conflicts
          /           or to resolve any that might be introduced by a change of waycast design
            * wayscript in non-way files
                - wayscript inclusions in files not dedicated to wayscripting
                    ( as e.g. way.xht is dedicated
                - else if also relying on other files to formalize one's way:
                    - the waycast would lose coherence
                    - personally
                        - it would get out of hand
                        - it would feel less WYSIWYG when editing the files
                            - since a unified view would require a more complicated assembly
                              that's difficult to foresee in imagination
                                - while editing
                    - technically
                        - since a unified view/presentation would require a more complicated assembly
                            - it would be more difficult to program the presenter (UI)
            * anything that is better (or just as well) stored outside the waycast
                ( cf. 'catch all'

    ____________________________________________________________________________________________________
    personalized configuration`
    - one's personal configuration goes in waycast root files such as
        * /way.css
        * /way.js
    -? how refer to the root directory in the way.xht *style* and *script*
        - explicit relative location + it replaces *cog:cast*
            - each way.xht loads way.js by a *script* element with a relative *src* path
            - this makes *cog:cast* superfluous
                - at least its *base* attribute is now superfluous
                    - implied already by relative *src* path of (root file) way.js
            = test the replacement
            = commit



                                     Copyright © 2017-2018 Michael Allan and contributors.  Licence MIT.
